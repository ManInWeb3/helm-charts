{{- $dataPath := "/data" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "node.fullname" . }}
  labels:
    {{- include "node.labels" . | nindent 4 }}
  annotations:
    {{- toYaml .Values.annotations | nindent 4 }}
spec:
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  revisionHistoryLimit: 3
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "node.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "node.fullname" . }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  template:
    metadata:
      labels:
        {{- include "node.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "node.serviceAccountName" . }}
    {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      tolerations:
        {{- with .Values.tolerations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      initContainers:
        - name: init-dirs-external-ip
          image: alpine/k8s:1.30.4
          env:
            - name: APP_HOME
              value: {{$dataPath}}
          command:
            - /bin/sh
            - -exuc
            - |
              #* Calculate and annotate external Ports
              ORDINAL=$(echo $HOSTNAME|grep -Eo '[0-9]+$')
              kubectl annotate pod $HOSTNAME external-port-tcp=$(($ORDINAL+{{.Values.lighthouse.startExternalPortTcp}})) --overwrite;
              kubectl annotate pod $HOSTNAME external-port-udp=$(($ORDINAL+{{.Values.lighthouse.startExternalPortUdp}})) --overwrite;
              kubectl annotate pod $HOSTNAME external-port-quic=$(($ORDINAL+{{.Values.lighthouse.startExternalPortQuic}})) --overwrite;

              #* Annotate external IP
              kubectl annotate pod $HOSTNAME external-ip=$(curl -4 ifconfig.me) --overwrite;

              #* Generate the JWT secret key
              if [ ! -f $APP_HOME/jwt.txt ]; then
                apk add openssl
                openssl rand -hex 32 | tr -d "\n" > $APP_HOME/jwt.txt
              fi

              if [[ ! -d $APP_HOME/reth || ! -d $APP_HOME/lighthouse ]]; then
                mkdir -p $APP_HOME/reth $APP_HOME/lighthouse
                chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }} $APP_HOME
              fi
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: storage
              mountPath: {{$dataPath}}

      containers:
        - name: reth
          image: {{ .Values.reth.image.repository }}:{{ .Values.reth.image.tag }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          env:
            - name: EXTERNAL_IP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-ip']
            - name: APP_HOME
              value: "{{$dataPath}}"
          command:
            # - sleep
            # - "10000000000000"
            - reth
            - node
            - --chain={{.Values.ethereumChain}}
            - --datadir=$(APP_HOME)/reth
            - --http
            - --http.addr=0.0.0.0
            - --http.port=8545
            - --http.api=admin,debug,eth,net,trace,txpool,web3,rpc,reth,ots
            - --http.corsdomain=*
            - --ws
            - --ws.addr=0.0.0.0
            - --ws.port=8546
            - --ws.origins=*
            - --ws.api=admin,debug,eth,net,trace,txpool,web3,rpc,reth,ots
            - --authrpc.jwtsecret=$(APP_HOME)/jwt.txt
            - --authrpc.addr=0.0.0.0
            - --authrpc.port=8551
            - --port=30303
            - --discovery.port=30304
            - --metrics=0.0.0.0:7300
            - --log.file.max-files=0
            - --nat=extip:$(EXTERNAL_IP)
            {{- with .Values.reth.aditionalArgs}}
            {{- toYaml . | nindent 12 }}
            {{- end }}

          ports:
            - containerPort: 8545
              name: eth1-rpc
              protocol: TCP
            - containerPort: 8546
              name: eth1-ws
              protocol: TCP
            - containerPort: 30303
              name: eth1-p2p
              protocol: TCP
            - containerPort: 30304
              name: eth1-discovery
              protocol: UDP
            - containerPort: 7300
              name: eth1-metrics
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 8545
          startupProbe:
            tcpSocket:
              port: 8545
            periodSeconds: 30
            failureThreshold: 20
          resources:
            {{- toYaml .Values.reth.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
              {{ toYaml .Values.extraVolumeMounts | nindent 12}}
            {{- end }}
            - name: storage
              mountPath: {{$dataPath}}

        - name: lighthouse
          image: {{.Values.lighthouse.image.repository}}:{{.Values.lighthouse.image.tag}}
          imagePullPolicy: {{ .Values.pullPolicy }}
          env:
            - name: EXTERNAL_IP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-ip']
            - name: EXTERNAL_PORT_TCP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-port-tcp']
            - name: EXTERNAL_PORT_UDP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-port-udp']
            - name: EXTERNAL_PORT_QUICK
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-port-quic']
            - name: APP_HOME
              value: "{{$dataPath}}"
          command:
            # - sleep
            # - "10000000000000"
            - /usr/local/bin/lighthouse
            - beacon_node
            - --network={{.Values.ethereumChain}}
            - --datadir=$(APP_HOME)/lighthouse
            - --execution-endpoint=http://127.0.0.1:8551
            - --execution-jwt=$(APP_HOME)/jwt.txt
            - --listen-address=0.0.0.0
            - --port=9222
            - --discovery-port=9223
            - --quic-port=9224
            - --enr-address=$(EXTERNAL_IP)
            - --enr-tcp-port=$(EXTERNAL_PORT_TCP)
            - --enr-udp-port=$(EXTERNAL_PORT_UDP)
            - --enr-quic-port=$(EXTERNAL_PORT_QUICK)
            - --http
            - --http-port=9545
            - --http-address=0.0.0.0
            - --http-allow-origin=*
            - --metrics
            - --metrics-address=0.0.0.0
            - --metrics-allow-origin=*
            - --metrics-port=7301
            {{- with .Values.lighthouse.aditionalArgs}}
            {{- toYaml . | nindent 12 }}
            {{- end }}

          ports:
            - containerPort: 9545
              name: eth2-rpc
              protocol: TCP
            - containerPort: 9222
              name: eth2-p2p
              protocol: TCP
            - containerPort: 9223
              name: eth2-discovery
              protocol: UDP
            - containerPort: 9224
              name: eth2-quic
              protocol: UDP
            - containerPort: 7301
              name: eth2-metrics
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9545
          startupProbe:
            tcpSocket:
              port: 9545
            failureThreshold: 20
            periodSeconds: 30

          resources:
            {{- toYaml .Values.lighthouse.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
              {{ toYaml .Values.extraVolumeMounts | nindent 12}}
            {{- end }}
            - name: storage
              mountPath: {{$dataPath}}

      {{- if .Values.readynessProbe.enabled }}
        - name: readiness-probe
          image: alpine:latest
          imagePullPolicy: {{ .Values.pullPolicy }}
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
          command:
            - /bin/sh
            - -ceu
            - |
              #* Install requirements for the readyness probe
              apk add jq curl

              MAX_ETH1_LATEST_BLOCK_AGE=15  # Set your acceptable age threshold in seconds

              #* This loop to show status in the log
              while true; do
                ETH2_SYNC_STATUS=$(curl -s "http://127.0.0.1:9545/lighthouse/ui/health" | jq -r .data.sync_state)
                ETH2_CONNECTED_PEERS=$(curl -s "http://127.0.0.1:9545/lighthouse/ui/health" | jq -r .data.connected_peers)

                ETH1_TIMESTAMP_HEX=$(curl -sH "Content-Type: application/json" -X POST \
                  --data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest", false],"id":67}' \
                  127.0.0.1:8545 | jq -r .result.timestamp)

                ETH1_LATEST_BLOCK_AGE=$(($(date +%s) - $ETH1_TIMESTAMP_HEX))

                echo "ETH2_SYNC_STATUS: $ETH2_SYNC_STATUS"
                echo "ETH2_CONNECTED_PEERS: $ETH2_CONNECTED_PEERS"
                echo "ETH1_LATEST_BLOCK_AGE: $ETH1_LATEST_BLOCK_AGE seconds"

                sleep 30
              done
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -ceu
                - |
                  MAX_ETH1_LATEST_BLOCK_AGE=15  # seconds

                  ETH2_SYNC_STATUS=$(curl -s "http://127.0.0.1:9545/lighthouse/ui/health" | jq -r .data.sync_state)

                  ETH1_TIMESTAMP_HEX=$(curl -sH "Content-Type: application/json" -X POST \
                    --data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest", false],"id":67}' \
                    127.0.0.1:8545 | jq -r .result.timestamp)

                  # Check for null/empty timestamp
                  if [[ -z "$ETH1_TIMESTAMP_HEX" || "$ETH1_TIMESTAMP_HEX" == "null" ]]; then
                    echo "Failed to retrieve ETH1 timestamp"
                    exit 1
                  fi

                  ETH1_LATEST_BLOCK_AGE=$(($(date +%s) - $ETH1_TIMESTAMP_HEX))

                  if [[ "$ETH2_SYNC_STATUS" == "Synced" && "$ETH1_LATEST_BLOCK_AGE" -lt "$MAX_ETH1_LATEST_BLOCK_AGE" ]]; then
                    exit 0
                  else
                    exit 1
                  fi

            initialDelaySeconds: 60
            periodSeconds: 15
            failureThreshold: 3

          resources:
            limits:
              cpu: 1
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          # readinessProbe:
          #   initialDelaySeconds: 60
          #   httpGet:
          #     path: /ready
          #     port: 8080
      {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: storage
        {{- with .Values.persistence.pvcLabels}}
        labels:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        storageClassName: {{ .Values.persistence.storageClassName }}
